// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  emailVerified Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  sessions        Session[]
  accounts        Account[]
  writingSessions WritingSession[]

  @@map("user")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  accountId         String
  providerId        String
  accessToken       String?
  refreshToken      String?
  idToken           String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope             String?
  password          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([accountId, providerId])
  @@map("account")
}

model Session {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  token     String   @unique
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtoken")
}

model WritingSession {
  id              String   @id @default(cuid())
  userId          String   @map("user_id")
  title           String?
  content         String   @db.Text
  wordCount       Int      @map("word_count")
  durationSeconds Int      @map("duration_seconds")
  topicCategory   String?  @map("topic_category") @db.VarChar(100)
  difficultyMode  String   @map("difficulty_mode") @db.VarChar(20)
  completed       Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("writing_session")
}

model WritingPrompt {
  id              String   @id @default(cuid())
  category        String   @db.VarChar(100)
  promptText      String   @map("prompt_text") @db.Text
  difficultyLevel Int      @default(1) @map("difficulty_level")
  createdAt       DateTime @default(now())

  @@map("writing_prompt")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}
